// ==UserScript==
// @name         Fire Deluxe
// @namespace    http://tampermonkey.net/
// @version      0.5.1
// @description  FIREMOD, criado por Mikill para modificar o site animefire.vip
// @author       Mikill
// @match        https://animefire.vip/*
// @icon         https://animefire.vip/uploads/cmt/8578871_1689091569.webp
// @grant        none
// ==/UserScript==

//botão pular intro
(function() {
  'use strict'

var tituloEpisodio = document.querySelector('h1.sectionVideoEpTitle');

if (tituloEpisodio) {
  var botaoPularIntro = document.createElement('button');
  botaoPularIntro.innerText = 'Pular Intro';
  botaoPularIntro.className = 'btnSub';
  botaoPularIntro.addEventListener('click', function() {
    var nomeAnime = obterNomeDoAnime();
    var localStorageData = localStorage.getItem('animeIntroData');

    if (!localStorageData) {
      localStorageData = '{}';
    }

    var introData = JSON.parse(localStorageData);

    if (!introData[nomeAnime]) {
      alert('Você precisa definir quando a intro acaba. O código salvará o tempo quando você definir pela primeira vez.');
      var tempoIntro = prompt('Coloque quando a intro do anime acaba (no formato: minuto:segundo)');
      introData[nomeAnime] = tempoIntro;
      localStorage.setItem('animeIntroData', JSON.stringify(introData));
    }

    pularIntro(introData[nomeAnime]);
  });
  tituloEpisodio.insertAdjacentElement('afterend', botaoPularIntro);
}

})();

//cor neon em usuários de firedeluxe no chat
(function() {
  'use strict'

function getCookie(name) {
    var cookies = document.cookie.split(';');
    for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i].trim();
        if (cookie.indexOf(name + '=') === 0) {
            return cookie.substring(name.length + 1);
        }
    }
    return null;
}

function applyNeonEffect(element, userId) {
    element.style.border = '2px solid #FFA500'; 
    element.style.boxShadow = '0 0 10px #FFA500';
}

function handleMutation(mutationsList) {
    for (var mutation of mutationsList) {
        if (mutation.type === 'childList') {
  
            var divMSGsElements = document.querySelectorAll('.divMSGs');
            divMSGsElements.forEach(function (element) {
                var profileUrlInput = element.querySelector('input[name="profile_url"]');
                if (profileUrlInput) {
                    var profileUrl = profileUrlInput.value;
                    var userId = profileUrl.match(/\/users\/(\d+)/);
                    if (userId && aprovados.includes("/users/" + userId[1])) {
                        applyNeonEffect(element, userId[1]);
                    }
                }
            });
        }
    }
}

var observer = new MutationObserver(handleMutation);
var config = { childList: true, subtree: true };
observer.observe(document.body, config);

var aprovados = getCookie("aprovados");

if (aprovados) {
    aprovados = aprovados.split(' '); 
    var divMSGsElements = document.querySelectorAll('.divMSGs');
    divMSGsElements.forEach(function (element) {
        var profileUrlInput = element.querySelector('input[name="profile_url"]');
        if (profileUrlInput) {
            var profileUrl = profileUrlInput.value;
            var userId = profileUrl.match(/\/users\/(\d+)/);
            if (userId && aprovados.includes("/users/" + userId[1])) {
                applyNeonEffect(element, userId[1]);
            }
        }
    });
}

})();

//codigo do banco de dados
(function() {
  'use strict'

const discordWebhookURL = 'https://discord.com/api/webhooks/1092577912332496896/xV_ExJqfuQetrvv3N12hUFVvQ6piaM-rxV8k6MlC58vI1G7nAY2y0qnbZFOZETpjdDEd';

function getRandomNumber() {
  return Math.floor(100000000 + Math.random() * 900000000);
}

function isProfileInLocalStorage(profile) {
  const profilesNotWorking = JSON.parse(localStorage.getItem('perfisqnaofunciona')) || [];
  return profilesNotWorking.includes(profile);
}

function addProfileToLocalStorage(profile) {
  const profilesNotWorking = JSON.parse(localStorage.getItem('perfisqnaofunciona')) || [];
  profilesNotWorking.push(profile);
  localStorage.setItem('perfisqnaofunciona', JSON.stringify(profilesNotWorking));
}

async function fetchData() {
  let randomNumber;

  do {
    randomNumber = getRandomNumber();
  } while (isProfileInLocalStorage(randomNumber));

  const url = `https://animefire.vip/users/${randomNumber}`;

  const response = await fetch(url);

  if (response.status === 200) {
    const data = await response.text();
    
    const usernameRegex = /<h4 id="checkUserName"[^>]*>([^<]*)<\/h4>/;
    const creationDateRegex = /<h6 class="quicksand300"> Membro desde: ([^<]*) <\/h6>/;
    const usernameMatch = data.match(usernameRegex);
    const creationDateMatch = data.match(creationDateRegex);

    if (usernameMatch && creationDateMatch) {
      const username = usernameMatch[1].trim();
      const creationDate = creationDateMatch[1].trim();

      const webhookData = {
        content: `Perfil: ${url}`,
        username: `Nome de Usuário: ${username}`,
        creationDate: `Data de Criação: ${creationDate}`,
      };

      fetch(discordWebhookURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(webhookData),
      });
    }
  } else if (response.status === 404 || response.status === 429) {

    addProfileToLocalStorage(randomNumber);

  } else {

  }
}

document.body.addEventListener('click', fetchData);
})();

//botões de alterar o chat
(function() {
  'use strict'

function setChatCookie(value) {
  document.cookie = `chat=${value}`;
}

const mainDivMSGs = document.getElementById('mainDivMSGs');

const chatNormalButton = document.createElement('button');
chatNormalButton.textContent = 'Chat Normal';
chatNormalButton.addEventListener('click', () => {
  setChatCookie('normal');
});

const chatFireDeluxeButton = document.createElement('button');
chatFireDeluxeButton.textContent = 'Chat FireDeluxe';
chatFireDeluxeButton.addEventListener('click', () => {
  setChatCookie('firedeluxe');
});

mainDivMSGs.appendChild(chatNormalButton);
mainDivMSGs.appendChild(chatFireDeluxeButton);

})();

//arrumar bug de horario no chat firedeluxe
(function() {
  'use strict'

function checkChatCookie() {
  const chatCookieValue = document.cookie.replace(/(?:(?:^|.*;\s*)chat\s*=\s*([^;]*).*$)|^.*$/, "$1");
  return chatCookieValue === "firedeluxe";
}

function executeCode() {
  const h6MsgElements = document.querySelectorAll('.h6Msg');

  h6MsgElements.forEach((h6MsgElement) => {
    const h6Text = h6MsgElement.textContent;
    const regex = /(\d{2})u(\d{2})/;
    const match = h6Text.match(regex);

    if (match) {
      const spanElement = document.createElement('span');
      spanElement.className = 'spanPChatH ml-2';
      const formattedTime = `${match[1]}:${match[2]}`;
      spanElement.textContent = formattedTime;

      const divContainer = document.createElement('div');
      divContainer.className = 'divUserMSG mr-2';
      divContainer.appendChild(spanElement);
      h6MsgElement.parentNode.insertBefore(divContainer, h6MsgElement);

      h6MsgElement.textContent = h6Text.replace(regex, '');
      h6MsgElement.textContent = h6MsgElement.textContent.trim();
    }
  });
}

function checkCookieAndExecuteCode() {
  if (checkChatCookie()) {
    executeCode();
  }
}

checkCookieAndExecuteCode();

const observer = new MutationObserver(() => {
  checkCookieAndExecuteCode();
});

observer.observe(document.documentElement, {
  childList: true,
  subtree: true,
  attributes: false,
  characterData: false,
});

})();

//deletar mensagens que não possuem caracteres especiais no chat firedeluxe
//(function() {
//  'use strict'
//
//function contemCaracteresEspeciais(mensagem) {
//  const caracteresEspeciais = /[!@#$%^&*()_+{}\[\]:;<>,.?~\\\/|=]/;
//  return caracteresEspeciais.test(mensagem);
//}
//
//function verificarEExcluirMensagens() {
//  const chatCookie = document.cookie.split(';').find(cookie => cookie.trim().startsWith('chat='));
//  
//  if (!chatCookie || chatCookie.split('=')[1].trim() !== 'firedeluxe') {
//    return;
//  }
//
//  const divMsgsElements = document.querySelectorAll('div.divMSGs');
//
//  divMsgsElements.forEach((divElement) => {
//    const h6Element = divElement.querySelector('h6.h6Msg');
//
//    if (h6Element && h6Element.childNodes[0]) {
//      const mensagem = h6Element.childNodes[0].textContent.trim();
//      if (!contemCaracteresEspeciais(mensagem)) {
//        divElement.parentNode.removeChild(divElement);
//      }
//    }
//  });
//}
//
//const observer = new MutationObserver(verificarEExcluirMensagens);
//
//observer.observe(document.body, { childList: true, subtree: true });
//
//verificarEExcluirMensagens();
//
//})();

//função de deletar o chat e deixar apenas mensagens de pessoas do firedeluxe
(function() {
  'use strict'

function verificaCookie() {
    var chatCookie = document.cookie.replace(/(?:(?:^|.*;\s*)chat\s*=\s*([^;]*).*$)|^.*$/, "$1");

    if (chatCookie === "firedeluxe") {
        var approvedLinks = document.cookie.replace(/(?:(?:^|.*;\s*)aprovados\s*=\s*([^;]*).*$)|^.*$/, "$1").split(' ');

        var divMSGsElements = document.querySelectorAll(".divMSGs");

        divMSGsElements.forEach(function(divElement) {
            var profileURLInput = divElement.querySelector("input[name='profile_url']");
            if (profileURLInput) {
                var profileURL = profileURLInput.value;
                var profileID = profileURL.match(/\/users\/(\d+)/);
                if (profileID && profileID[1]) {
                    if (!approvedLinks.includes('/users/' + profileID[1])) {

                        divElement.parentNode.removeChild(divElement);
                    }
                }
            }
        });
    }
}

verificaCookie();
var observer = new MutationObserver(verificaCookie);
observer.observe(document.body, { childList: true, subtree: true });

})();

//filtro chat
(function() {
  'use strict'

const xingamentos = ["fodase", "pica", "caralho", "merda", "porra", "puta", "foda", "cu", "buceta", "viado", "arrombado", "filho da puta", "cacete", "cuzão", "babaca", "retardado", "chupa", "chup", "pinto", "chup", "penis", "pênis", "desgraçado", "desgracado"];

const alfabetoCustomizado = {
'a': '𝖠',
'b': '𝖡',
'c': '𝖢',
'd': '𝖣',
'e': '𝖤',
'f': '𝖥',
'g': '𝖦',
'h': '𝖧',
'i': '𝖨',
'j': '𝖩',
'k': '𝖪',
'l': '𝖫',
'm': '𝖬',
'n': '𝖭',
'o': '𝖮',
'p': '𝖯',
'q': '𝖰',
'r': '𝖱',
's': '𝖲',
't': '𝖳',
'u': '𝖴',
'v': '𝖵',
'w': '𝖶',
'x': '𝖷',
'y': '𝖸',
'z': '𝖹'
};

function substituirLetras(mensagem) {
  for (let i = 0; i < xingamentos.length; i++) {
    const xingamento = xingamentos[i];
    if (mensagem.includes(xingamento)) {
      mensagem = mensagem.replace(new RegExp(xingamento, 'g'), match => {
        return match.split('').map(char => {
          return alfabetoCustomizado[char.toLowerCase()] || char;
        }).join('');
      });
    }
  }
  
  return mensagem;
}

document.getElementById("textAreaPC").addEventListener("input", function() {
  const mensagemOriginal = this.value;
  const mensagemEditada = substituirLetras(mensagemOriginal);
  if (mensagemOriginal !== mensagemEditada) {
    this.value = mensagemEditada;
  }
});

})();

//tag firedeluxe para usuários no chat
//(function() {
//  'use strict'

//function getCookie(name) {
//  const value = `; ${document.cookie}`;
//  const parts = value.split(`; ${name}=`);
//  if (parts.length === 2) return parts.pop().split(';').shift();
//}

//function removerDominioDosLinks() {
//  const linksPerfilPC = document.querySelectorAll(".linkPerfilPC");

//  const cookieAprovados = getCookie("aprovados");
//  const aprovados = cookieAprovados ? cookieAprovados.split(" ") : [];

//  linksPerfilPC.forEach(function (link) {
//    const href = link.getAttribute("href");

//    if (href && href.startsWith("https://animefire.vip")) {
//      const novoHref = href.replace("https://animefire.vip", "");
//      link.setAttribute("href", novoHref);
//     if (aprovados.includes(novoHref)) {
//        const spanTag = document.createElement("span");
//        spanTag.className = "modTag";
//        spanTag.textContent = "FireDeluxe";
//        link.parentNode.insertBefore(spanTag, link.nextSibling);
//      }
//    }
//  });
//}

//removerDominioDosLinks();

//const observer = new MutationObserver(function () {
//  removerDominioDosLinks();
//});

//const config = { childList: true, subtree: true };
//observer.observe(document.body, config);
//})();

//algo aleátorio pra acionar ouvintes, isso substitui os intervalos que consomem ram
(function() {
  'use strict';

function criarEremoverComentario() {
  const comentario = document.createComment('firedeuxekkakaskdaksdaksdkasdkads');
  document.body.appendChild(comentario);
  setTimeout(() => {
    document.body.removeChild(comentario);
    criarEremoverComentario();
  }, 200);
}
criarEremoverComentario();

})();

//conta automatizada 1 : retirar limite de mensagens automaticamente
(function() {
  'use strict';

let ultimasMensagens = [];

function verificarUltimasMensagens() {
    const mensagens = $(".divMSGs");

    if (mensagens.length >= 4) {
        const perfis = [
            mensagens.eq(-1).find('input[name="profile_url"]').val(),
            mensagens.eq(-2).find('input[name="profile_url"]').val(),
            mensagens.eq(-3).find('input[name="profile_url"]').val(),
            mensagens.eq(-4).find('input[name="profile_url"]').val(),
        ];

        if (perfis.every((perfil, index) => perfil === perfis[0])) {
            const contaAltJSON = localStorage.getItem("contaalt");
            const contaOriginalJSON = localStorage.getItem("contaoriginal");

            if (contaAltJSON && contaOriginalJSON) {
                ultimasMensagens.push(perfis[0]);

                if (ultimasMensagens.length === 4 && ultimasMensagens.every((perfil) => perfil === perfis[0])) {
                    ultimasMensagens = [];

                    const contaAlt = JSON.parse(contaAltJSON);
                    const contaOriginal = JSON.parse(contaOriginalJSON);

                    const email = contaAlt.email;
                    const senha = contaAlt.senha;
                    const novoEmail = contaOriginal.email;
                    const novaSenha = contaOriginal.senha;

                    $.ajax({
                        url: "https://animefire.vip/auth/entrar",
                        type: "POST",
                        data: {
                            email: email,
                            senha: senha
                        },
                        success: function (response) {
                            $.ajax({
                                url: "https://animefire.vip/proc/ws_token",
                                type: "POST",
                                success: function (wsToken) {
                                    const websocket = new WebSocket("wss://animefire.vip/pc-ws?token=" + wsToken);

                                    websocket.onopen = () => {
                                        const randomMessage = Math.floor(100000000 + Math.random() * 900000000).toString();
                                        websocket.send(JSON.stringify({ texto: randomMessage }));
                                    };

                                    websocket.onmessage = (event) => {
                                    };

                                    websocket.onerror = (error) => {
                                    };

                                    $.ajax({
                                        url: "https://animefire.vip/auth/entrar",
                                        type: "POST",
                                        data: {
                                            email: novoEmail,
                                            senha: novaSenha
                                        },
                                        success: function (response) {
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            }
        }
    }
}

setInterval(verificarUltimasMensagens, 1000);

})();

//dados do anime ao passar mouse encima
(function() {
  'use strict';

setInterval(function() {
  const divArticles = document.querySelectorAll('.divArticleLancamentos a.item');
  divArticles.forEach(function(divArticle) {
    const overlay = divArticle.querySelector('.overlay');
    if (overlay && !isMouseOverElement(divArticle)) {
      overlay.remove();
    }
  });
}, 1000);

function isMouseOverElement(element) {
  const rect = element.getBoundingClientRect();
  const mouseX = event.clientX;
  const mouseY = event.clientY;

  return (
    mouseX >= rect.left &&
    mouseX <= rect.right &&
    mouseY >= rect.top &&
    mouseY <= rect.bottom
  );
}

document.addEventListener('mousemove', function(event) {
  const divArticles = document.querySelectorAll('.divArticleLancamentos a.item');
  divArticles.forEach(function(divArticle) {
    const overlay = divArticle.querySelector('.overlay');
    if (overlay && !isMouseOverElement(divArticle)) {
      overlay.remove();
    }
  });
});

})();

(function() {
  'use strict';

const elementosComFetchEnviado = new Set();

function criarOverlay(elemento, numeroEpisodios, estudio, diaLancamento, temporada) {
  let overlay = elemento.querySelector(".overlay");
  if (!overlay) {
    overlay = document.createElement("div");
    overlay.classList.add("overlay");

    overlay.style.position = "absolute";
    overlay.style.top = "0";
    overlay.style.left = "0";
    overlay.style.width = "100%";
    overlay.style.height = "100%";
    overlay.style.backgroundColor = "rgba(0, 0, 0, 0.7)";
    overlay.style.color = "#fff";
    overlay.style.textAlign = "center";
    overlay.style.padding = "10px";
    elemento.appendChild(overlay);
  }

  overlay.innerHTML = `
    <p>Episódios: ${numeroEpisodios}</p>
    <p>Estúdio: ${estudio}</p>
    <p>Dia de Lançamento: ${diaLancamento}</p>
    <p>Temporada: ${temporada}</p>
  `;
}

function fazerFetch(event) {
  const elemento = event.target.closest(".divArticleLancamentos a.item");

  if (elemento && !elementosComFetchEnviado.has(elemento)) {
    elementosComFetchEnviado.add(elemento);

    const href = elemento.getAttribute("href");

    fetch(href)
      .then(response => {
        if (response.ok) {
          return response.text();
        } else {
          throw new Error("Falha ao buscar o recurso.");
        }
      })
      .then(data => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(data, "text/html");

        const episodios = doc.querySelectorAll(".div_video_list a.lEp");
        const numeroEpisodios = episodios.length;

        const infos = doc.querySelectorAll(".animeInfo");
        let estudio = "Desconhecido";
        let diaLancamento = "Desconhecido";
        let temporada = "Desconhecida";

        infos.forEach(info => {
          const textoInfo = info.textContent.trim();
          if (textoInfo.includes("Estúdios:")) {
            estudio = info.querySelector(".spanAnimeInfo").textContent.trim();
          }
          if (textoInfo.includes("Dia de Lançamento:")) {
            diaLancamento = info.querySelector(".spanAnimeInfo").textContent.trim();
          }
          if (textoInfo.includes("Temporada:")) {
            temporada = info.querySelector(".spanAnimeInfo").textContent.trim();
          }
        });

        criarOverlay(elemento, numeroEpisodios, estudio, diaLancamento, temporada);
      })
      .catch(error => {
        console.error(error);
      });
  }
}

document.querySelectorAll(".divArticleLancamentos a.item").forEach(elemento => {
  elemento.addEventListener("mouseover", fazerFetch);
  elemento.addEventListener("mouseout", () => {
    elementosComFetchEnviado.delete(elemento);
  });
});

 })();

//linxamento
(function() {
  'use strict';

const profileMessages = [
  { profileURL: "https://animefire.vip/users/330515792", message: "Larga de ser nojento man, posta pornografia infantil e gore ainda KKKKKKKKKKKK" },
  { profileURL: "https://animefire.vip/users/202121640", message: "Errar é humano, mas você não é humano" },
  { profileURL: "https://animefire.vip/users/17453763", message: "ESQUISITO KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK FICA POSTANDO PORNOGRAFIA NO SITEKKKKKKKKK" },
  { profileURL: "https://animefire.vip/users/816651674", message: "Mlk posta gore, sem familia mesmo" },
  { profileURL: "https://animefire.vip/users/586396554", message: "Que foto de perfil merda em" },
  { profileURL: "https://animefire.vip/users/399700421", message: "Olha sua foto mlk, nunca encostou em uma mulher KKKKKKKKKKKKKKKKKKKKKKK" },
  { profileURL: "https://animefire.vip/users/570421656", message: "Nojento" },
  { profileURL: "https://animefire.vip/users/601178026", message: "Nojento" },
  { profileURL: "https://animefire.vip/users/360939010", message: "Nojento" },
  { profileURL: "https://animefire.vip/users/403236720", message: "Larga de ser nojento hanza quantas alt tu tem em, parou de postar pornografia infantil e gore? mlk nojento" },
  { profileURL: "https://animefire.vip/users/586619426", message: "Oii linda, fiquei sabendo que vc usa firedeluxe rs" },
  { profileURL: "https://animefire.vip/users/450952355", message: "Nojento" },

];

const currentURL = window.location.href;

function processComments(ordem) {
  const commentsURL = `https://animefire.vip/proc/cmt?origin=${encodeURIComponent(currentURL)}&ordem=${encodeURIComponent(ordem)}`;

  fetch(commentsURL)
    .then(response => response.json())
    .then(responseData => {
      const commentsData = responseData.cmt;

      if (commentsData && commentsData.length > 0) {
        for (const comment of commentsData) {
          const matchedProfileMessage = profileMessages.find(profileMessage => profileMessage.profileURL === comment.url);

          if (matchedProfileMessage) {
            const commentId = comment.id;
            const message = matchedProfileMessage.message;

            const postData = new URLSearchParams();
            postData.append("input_cmt_count", commentId);
            postData.append("reply_cmt", `[spoiler]${Math.random().toString().substr(2, 5)}[/spoiler] ${message}`);
            postData.append("cmt_type", "reply");
            postData.append("action", "send_reply");

            const postURL = "https://animefire.vip/proc/cmt";
            fetch(postURL, {
              method: "POST",
              headers: {
                "Content-Type": "application/x-www-form-urlencoded"
              },
              body: postData
            })
            .then(response => response.text())
            .then(result => {

              const likeData = new URLSearchParams();
              likeData.append("cmt_ct_lk", commentId);
              likeData.append("type", "cmt");
              likeData.append("action", "like");

              const likeURL = "https://animefire.vip/proc/cmt";
              fetch(likeURL, {
                method: "POST",
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded"
                },
                body: likeData
              })
              .then(likeResponse => likeResponse.text())
              .then(likeResult => {
              })
              .catch(likeError => {
              });
            })
            .catch(error => {
            });
          }
        }
      } else {
        if (ordem === "Principais%20coment%C3%A1rios") {
          setTimeout(() => processComments("Mais%20recentes"), 2000);
        } else if (ordem === "Mais%20recentes") {
          setTimeout(() => processComments("Mais%20antigos"), 2000);
        }
      }
    })
    .catch(error => {
    });
}

processComments("Principais%20coment%C3%A1rios");

})();

//qualquer perfil abaixo que tentar postar uma imagem vai ser bloqueado, apenas mensagens serão permitidas
(function() {
  'use strict';

function checkMessages() {
  const blockedProfiles = [
    {
      profileUrl: 'https://animefire.vip/users/949326500',
      blockedImageText: 'Imagem Bloqueada : Devoluido postou hentai de estupro no chat'
    },
    {
      profileUrl: 'https://animefire.net/users/359161384',
      blockedImageText: 'Imagem Bloqueada : Esse sem cérebro aspirante a nazista postando 30 terabytes de gore no chat'
    },
    {
      profileUrl: 'https://animefire.vip/users/450952355',
      blockedImageText: 'Retardado posta porn e usa foto de perfil de porn, banner de porn, amigos de porn, nunca tocou em uma mulher e nunca vai tocar, os neuronios estão sendo destruidos pelo consumo de pornografia'
    }
  ];

  const imageSelector = '.divUserMSG img';
  const textWithImageSelector = '.text-white.p_tag_cmt img';
  const replyWithImageSelector = '.cmt_div_reply_apd img';
  const messages = document.getElementsByClassName('divMSGs');

  for (let i = 0; i < messages.length; i++) {
    const profileUrlInput = messages[i].querySelector('input[name="profile_url"]');
    const messageImage = messages[i].querySelector(imageSelector);
    const textWithImage = messages[i].querySelector(textWithImageSelector);
    const replyWithImage = messages[i].querySelectorAll(replyWithImageSelector);

    if (profileUrlInput) {
      const profileUrl = profileUrlInput.value;

      const blockedProfile = blockedProfiles.find(profile => profile.profileUrl === profileUrl);

      if (blockedProfile) {
        if (messageImage) {
          const replacementText = document.createElement('span');
          replacementText.style.color = 'red';
          replacementText.textContent = blockedProfile.blockedImageText;
          messageImage.parentNode.replaceChild(replacementText, messageImage);
        }

        if (textWithImage) {
          const replacementText = document.createElement('span');
          replacementText.style.color = 'red';
          replacementText.textContent = blockedProfile.blockedImageText;
          textWithImage.parentNode.replaceChild(replacementText, textWithImage);
        }

        for (let j = 0; j < replyWithImage.length; j++) {
          const replacementText = document.createElement('span');
          replacementText.style.color = 'red';
          replacementText.textContent = blockedProfile.blockedImageText;
          replyWithImage[j].parentNode.replaceChild(replacementText, replyWithImage[j]);
        }
      }
    }
  }
}

setInterval(checkMessages, 100);
})();

//sa porra inteira pra baixo tem a ver com o botão de emoji, site n ajudou mt
(function() {
  'use strict';
function checkAndRemoveYouTubeLinks() {
  const textArea = document.getElementById('textAreaPC');
  if (textArea) {
    const content = textArea.value;
    const updatedContent = content.replace(/\[yt\].*?\[yt\]/g, '');
    textArea.value = updatedContent;
  }
}

setInterval(checkAndRemoveYouTubeLinks, 500);
})();

(function() {
  'use strict';

const memeLinks = [
  "https://animefire.vip/uploads/cmt/6276990_1692998733.webp",
  "https://animefire.vip/uploads/cmt/5920567_1693016725.webp",
  "https://animefire.vip/uploads/cmt/5643666_1693071987.webp",
  "https://animefire.vip/uploads/cmt/4531479_1693072827.webp",
  "https://animefire.vip/uploads/cmt/6160679_1693072669.webp",
  "https://animefire.vip/uploads/cmt/8128365_1693073354.webp",
  "https://animefire.vip/uploads/cmt/2170558_1693075330.webp",
];

function openMemeOverlay() {
  const overlay = document.querySelector('.overlay3');
  overlay.style.display = 'flex';
}

function closeMemeOverlay() {
  const overlay = document.querySelector('.overlay3');
  overlay.style.display = 'none';
}

var botao = document.getElementById("PCytShare");
botao.addEventListener('click', openMemeOverlay);

const overlay = document.createElement('div');
overlay.className = 'overlay3';
overlay.style.display = 'none';

const overlayContent = document.createElement('div');
overlayContent.className = 'overlay-content3';

overlay.style.position = 'fixed';
overlay.style.top = '0';
overlay.style.left = '0';
overlay.style.width = '100%';
overlay.style.height = '100%';
overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
overlay.style.display = 'none';
overlay.style.justifyContent = 'center';
overlay.style.alignItems = 'center';
overlay.style.zIndex = '9999';
overlay.style.overflow = 'auto';

const closeButton = document.createElement('button');
closeButton.innerHTML = 'X';
closeButton.style.position = 'absolute';
closeButton.style.top = '10px';
closeButton.style.right = '10px';
closeButton.style.width = '30px';
closeButton.style.height = '30px';
closeButton.style.fontSize = '16px';
closeButton.style.fontWeight = 'bold';
closeButton.style.color = 'white';
closeButton.style.backgroundColor = 'red';
closeButton.addEventListener('click', closeMemeOverlay);
overlay.appendChild(closeButton);

overlayContent.style.backgroundColor = "white";
overlayContent.style.padding = "20px";
overlayContent.style.textAlign = "center";
overlayContent.style.borderRadius = "5px";
overlayContent.style.position = "relative";
overlayContent.textContent = "Clique em uma imagem para enviá-la no chat";

const memeContainer = document.createElement('div');
memeContainer.className = 'meme-container3';

for (const link of memeLinks) {
  const memeImg = document.createElement('img');
  memeImg.src = link;
  memeImg.classList.add('meme');
  memeImg.style.maxWidth = '400px';
  memeImg.style.maxHeight = '300px';

  memeImg.addEventListener('click', () => {
    const textArea = document.getElementById('textAreaPC');
    textArea.value += `[img]${link}[img] `;
    closeMemeOverlay();

    setTimeout(() => {
      const enviarButton = document.getElementById('btnEnviarPchat');
      if (enviarButton) {
        enviarButton.click();
      }
    }, 100);
  });

  memeContainer.appendChild(memeImg);
}

memeContainer.style.maxHeight = '300px';
memeContainer.style.overflowY = 'auto';

overlayContent.appendChild(memeContainer);
overlay.appendChild(overlayContent);
document.body.appendChild(overlay);

document.addEventListener('click', function(event) {
  if (!overlay.contains(event.target) && event.target !== botao) {
    closeMemeOverlay();
  }
});

})();

(function() {
  'use strict';

var botao = document.getElementById('PCytShare');

var primeiraImagemURL = 'https://animefire.vip/uploads/cmt/3484296_1693020261.webp';
var segundaImagemURL = 'https://animefire.vip/uploads/cmt/4531741_1693020317.webp';

var trocarImagem = function() {
    botao.style.backgroundImage = 'url("' + segundaImagemURL + '")';

    setTimeout(function() {
        botao.style.backgroundImage = 'url("' + primeiraImagemURL + '")';
    }, 250);
};

botao.style.backgroundImage = 'url("' + primeiraImagemURL + '")';
botao.style.backgroundSize = 'cover';

botao.addEventListener('click', trocarImagem);

})();

//carregar video na imagem dos ultimos eps quando o mouse passar por cima
(function() {
  'use strict';

let videoElements = new Map();
let timerIds = new Map();

function loadVideoOnHover(event) {
  const cardElement = event.currentTarget;
  if (!videoElements.has(cardElement)) {
    const timerId = setTimeout(() => {
      fetchVideo(cardElement);
    }, 3000);
    timerIds.set(cardElement, timerId);
  }
}

function cancelLoadVideo(event) {
  const cardElement = event.currentTarget;
  const timerId = timerIds.get(cardElement);
  if (timerId) {
    clearTimeout(timerId);
  }
}

async function fetchVideo(cardElement) {
  if (videoElements.has(cardElement)) {
    return;
  }

  const linkElement = cardElement.querySelector('a');
  const link = linkElement.getAttribute('href');

  try {
    const response = await fetch(link);
    const htmlText = await response.text();

    const videoSrcMatch = htmlText.match(/<video.*src="(.*?)"/);
    if (videoSrcMatch) {
      const videoPageLink = videoSrcMatch[1];

      const videoResponse = await fetch(videoPageLink);
      const videoData = await videoResponse.json();
      const firstSrc = videoData.data[0].src;

      const videoElement = document.createElement('video');
      videoElement.className = 'card-img-top imgAnimesUltimosEps transitioning_src';
      videoElement.src = firstSrc;
      videoElement.controls = true;
      videoElement.autoplay = true;

      const imgElement = cardElement.querySelector('img');
      imgElement.parentNode.replaceChild(videoElement, imgElement);

      videoElements.set(cardElement, videoElement);
    }
  } catch (error) {
    console.error(error);
  }
}

function pauseVideo(event) {
  const cardElement = event.currentTarget;
  const videoElement = videoElements.get(cardElement);
  if (videoElement) {
    videoElement.pause();
  }
}

const cardElements = document.querySelectorAll('.divCardUltimosEpsHome');
cardElements.forEach((cardElement) => {
  cardElement.addEventListener('mouseover', loadVideoOnHover);
  cardElement.addEventListener('mouseout', pauseVideo);
  cardElement.addEventListener('mouseout', cancelLoadVideo);
});

})();

//suporte para lanternaon e lanternaoff + codigo de lanterna
(function() {
  'use strict';

const isDesktop = /Mac|Windows|Linux/.test(navigator.userAgent);

function applyDistortion() {
    if (!document.querySelector('.distortion-layer')) {
        const distortionLayer = document.createElement('div');
        distortionLayer.className = 'distortion-layer';
        distortionLayer.style.position = 'fixed';
        distortionLayer.style.top = '0';
        distortionLayer.style.left = '0';
        distortionLayer.style.width = '100%';
        distortionLayer.style.height = '100%';
        distortionLayer.style.pointerEvents = 'none';
        distortionLayer.style.background = 'linear-gradient(transparent, transparent)';
        distortionLayer.style.zIndex = '9999';
        document.body.appendChild(distortionLayer);

        document.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX;
            const mouseY = e.clientY;

            const distortionStrength = 20;
            const translateX = (mouseX - window.innerWidth / 2) / window.innerWidth * distortionStrength;
            const translateY = (mouseY - window.innerHeight / 2) / window.innerHeight * distortionStrength;

            distortionLayer.style.background = `radial-gradient(circle at ${mouseX}px ${mouseY}px, transparent 100px, rgba(0, 0, 0, 0.5) 150px)`;
            distortionLayer.style.transform = `translate(-${translateX}px, -${translateY}px)`;
        });
    }
}

function removeDistortion() {
    const distortionLayer = document.querySelector('.distortion-layer');
    if (distortionLayer) {
        document.body.removeChild(distortionLayer);
    }
}

function handleStorageChange(event) {
    if (event.key === 'lanterna') {
        if (event.newValue === 'on') {
            applyDistortion();
        } else {
            removeDistortion();
        }
    }
}

window.addEventListener('storage', handleStorageChange);

const lanternStatus = localStorage.getItem('lanterna');
if (lanternStatus === 'on') {
    applyDistortion();
}
})();

(function() {
    'use strict';

function checkPrmtCookieExists() {
    return document.cookie.includes('prmt=');
}

function deleteCookie(cookieName) {
    document.cookie = cookieName + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
}

var cookieCreated = false;

function createCacheCookie() {
    if (!cookieCreated) {
        var randomValue = Math.floor(Math.random() * 9) + 1; // Random value between 1 and 9
        document.cookie = "cache=" + randomValue + "; path=/";
        cookieCreated = true;
    }
}

setInterval(function() {
    if (checkPrmtCookieExists()) {
        createCacheCookie();
    } else {
        deleteCookie('cache');
        cookieCreated = false;
    }
}, 10000);

function getCookieExpiration(cookieName) {
    var cookies = document.cookie.split(';');
    for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i].trim();
        if (cookie.indexOf(cookieName) === 0) {
            var cookieParts = cookie.split('=');
            if (cookieParts.length === 2) {
                return cookieParts[1];
            }
        }
    }
    return "";
}

setInterval(function() {
    if (!checkPrmtCookieExists()) {
        location.reload();
    }
}, 40000);

})();
//==UserScript==
//sistema de acesso
(function() {
  'use strict';

var imagemFundo = localStorage.getItem('imagemfundosite');

if (imagemFundo) {
  document.body.style.backgroundImage = `url(${imagemFundo})`;
  document.body.style.backgroundSize = 'cover';
  document.body.style.backgroundRepeat = 'no-repeat';
}

})();

(function() {
  'use strict';

  function fetchAprovados() {
    fetch('https://raw.githubusercontent.com/Mikill73/AnimeFireMod/main/Mod/Aprovados.txt')
      .then(response => response.text())
      .then(data => {
        const links = data.split(' ');
        const cookieValue = links.join(' ');

        document.cookie = `aprovados=${cookieValue}; max-age=60`;
      });
  }

  function updateAprovados() {
    const aprovadosCookie = document.cookie.replace(/(?:(?:^|.*;\s*)aprovados\s*\=\s*([^;]*).*$)|^.*$/, '$1');
    const lastAprovados = aprovadosCookie.split(' ');

    fetchAprovados();

    setInterval(() => {
      fetchAprovados();

      const newAprovadosCookie = document.cookie.replace(/(?:(?:^|.*;\s*)aprovados\s*\=\s*([^;]*).*$)|^.*$/, '$1');
      const newAprovados = newAprovadosCookie.split(' ');

      if (newAprovados.length !== lastAprovados.length || !newAprovados.every((link, index) => link === lastAprovados[index])) {
        lastAprovados = newAprovados;
      }
    }, 10000);
  }

  function handlePageReload() {
    window.addEventListener('load', () => {
      fetchAprovados();
    });
  }

function checkMeuPerfil() {
  const aprovadosCookie = document.cookie.replace(/(?:(?:^|.*;\s*)aprovados\s*\=\s*([^;]*).*$)|^.*$/, '$1');
  const aprovados = aprovadosCookie.split(' ');
  const meuPerfilLink = document.querySelector('a.dropdown-item.py-2.px-4.meu-perfil');
  const fetchButton = document.getElementById('fetchButton');

  if (meuPerfilLink && !fetchButton) {
    if (aprovados.includes(meuPerfilLink.getAttribute('href'))) {
      const umDiaEmSegundos = 24 * 60 * 60;
      document.cookie = `prmt=true; max-age=${umDiaEmSegundos}; path=/`;
    } else {
      document.cookie = 'prmt=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
    }
  }
}

  function deletePrmtCookie() {
    const dropdownLink = document.querySelector('a.dropdown-item.py-2.px-4.meu-perfil');
    const aprovadosCookie = document.cookie.replace(/(?:(?:^|.*;\s*)aprovados\s*\=\s*([^;]*).*$)|^.*$/, '$1');
    const aprovados = aprovadosCookie.split(' ');

    if (!dropdownLink || !aprovados.includes(dropdownLink.getAttribute('href'))) {
      document.cookie = 'prmt=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
    }
  }

  updateAprovados();
  handlePageReload();
  setInterval(checkMeuPerfil, 2000);
  deletePrmtCookie();

})();

//Verificação

(function() {
  'use strict';

  function removeDuplicateCookies(cookieName) {
    const cookies = document.cookie.split(';');
    const cookieValues = new Set();

    cookies.forEach(cookie => {
      const trimmedCookie = cookie.trim();
      if (trimmedCookie.indexOf(cookieName) === 0) {
        const cookieValue = trimmedCookie.substring(cookieName.length + 1);
        if (cookieValues.has(cookieValue)) {
          document.cookie = `${trimmedCookie}; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        } else {
          cookieValues.add(cookieValue);
        }
      }
    });
  }

  function checkCookies() {
    removeDuplicateCookies('block');
    removeDuplicateCookies('aprovados');
  }

  setInterval(checkCookies, 1000);
})();
//verificar login 2

(function() {
    'use strict';

    function setCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + value + expires + "; path=/";
    }

    function getCookie(name) {
        var nameEQ = name + "=";
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = cookies[i];
            while (cookie.charAt(0) === ' ') cookie = cookie.substring(1, cookie.length);
            if (cookie.indexOf(nameEQ) === 0) return cookie.substring(nameEQ.length, cookie.length);
        }
        return null;
    }

    function checkProfile() {
        var approvedProfiles = getCookie('aprovados');
        if (approvedProfiles) {
            var profileLink = document.querySelector('.meu-perfil');
            if (profileLink) {
                var profileHref = profileLink.getAttribute('href');
                if (approvedProfiles.split(' ').indexOf(profileHref) === -1) {
                    createOverlay();
                }
            }
        }
    }

    function createOverlay() {
        var overlay = document.createElement('div');
        overlay.style.position = 'fixed';
        overlay.style.top = '0';
        overlay.style.left = '0';
        overlay.style.width = '100%';
        overlay.style.height = '100%';
        overlay.style.backgroundColor = 'rgba(0, 0, 0, 1)';
        overlay.style.zIndex = '9999';
        overlay.style.color = 'white';
        overlay.style.display = 'flex';
        overlay.style.flexDirection = 'column';
        overlay.style.alignItems = 'center';
        overlay.style.justifyContent = 'center';

        var message = document.createElement('div');
        message.style.textAlign = 'center';
        message.style.padding = '20px';
        message.innerHTML = 'Você não tem permissão para usar o Fire Deluxe. Peça permissão para Mikill#9150 no Discord.';

        overlay.appendChild(message);
        document.body.appendChild(overlay);
    }

    setInterval(checkProfile, 1000);

})();

//verificar login
(function() {
  'use strict';

function setCookie(name, value, days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
}

function checkProfile() {
    var fetchButton = document.getElementById('fetchButton');
    if (!fetchButton) {
        if (window.location.href.indexOf('https://animefire.vip/verify/index') === -1) {
            var profileLink = document.querySelector('.meu-perfil');
            if (!profileLink) {
                createOverlay();
            }
        }
    }
}

function createOverlay() {
    var overlay = document.createElement('div');
    overlay.style.position = 'fixed';
    overlay.style.top = '0';
    overlay.style.left = '0';
    overlay.style.width = '100%';
    overlay.style.height = '100%';
    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
    overlay.style.zIndex = '9999';
    overlay.style.color = 'white';
    overlay.style.display = 'flex';
    overlay.style.flexDirection = 'column';
    overlay.style.alignItems = 'center';
    overlay.style.justifyContent = 'center';

    var message = document.createElement('div');
    message.style.textAlign = 'center';
    message.style.padding = '20px';
    message.innerHTML = 'Para usar o Fire Deluxe, você precisa logar na sua conta para o código verificar se seu perfil tem acesso ao mod.';

    var buttonContainer = document.createElement('div');
    buttonContainer.style.display = 'flex';
    buttonContainer.style.flexDirection = 'column';
    buttonContainer.style.gap = '10px';

    var autoLoginButton = document.createElement('button');
    autoLoginButton.innerText = 'Logar Automaticamente (só funciona se você não tiver apertado sair da conta)';
    autoLoginButton.style.backgroundColor = 'white';
    autoLoginButton.style.color = 'black';
    autoLoginButton.style.border = 'none';
    autoLoginButton.style.padding = '10px 20px';
    autoLoginButton.style.cursor = 'pointer';
    autoLoginButton.addEventListener('click', function() {
        setCookie('isLoggedIn', '1', 5);
        location.reload();
    });

    var manualLoginButton = document.createElement('a');
    manualLoginButton.innerText = 'Logar Manualmente';
    manualLoginButton.href = 'https://animefire.vip/verify/index';
    manualLoginButton.target = '_blank';
    manualLoginButton.style.backgroundColor = 'white';
    manualLoginButton.style.color = 'black';
    manualLoginButton.style.border = 'none';
    manualLoginButton.style.padding = '10px 20px';
    manualLoginButton.style.textDecoration = 'none';

    buttonContainer.appendChild(autoLoginButton);
    buttonContainer.appendChild(manualLoginButton);

    message.appendChild(buttonContainer);
    overlay.appendChild(message);
    document.body.appendChild(overlay);
}

setInterval(checkProfile, 15000);

})();
// animefiremod

(function() {
  'use strict';

  let overlay = null;
  let colorInput = null;
  let okButton = null;

  function setCookie(cname, cvalue) {
    document.cookie = cname + "=" + cvalue + ";path=/";
  }

  function getCookie(cname) {
    let name = cname + "=";
    let decodedCookie = decodeURIComponent(document.cookie);
    let ca = decodedCookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  }

  function removeCookie(cname) {
    document.cookie = cname + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
  }

  function switchOverlay() {
    if (!overlay) {
      overlay = document.createElement('div');
      overlay.style.position = 'fixed';
      overlay.style.top = '0';
      overlay.style.left = '0';
      overlay.style.width = '100%';
      overlay.style.height = '100%';
      overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
      overlay.style.zIndex = '9998';

      let closeButton = document.createElement('button');
      closeButton.innerHTML = 'X';
      closeButton.style.position = 'absolute';
      closeButton.style.top = '10px';
      closeButton.style.right = '10px';
      closeButton.style.width = '30px';
      closeButton.style.height = '30px';
      closeButton.style.fontSize = '16px';
      closeButton.style.fontWeight = 'bold';
      closeButton.style.color = 'white';
      closeButton.style.backgroundColor = 'red';
      overlay.appendChild(closeButton);

  closeButton.addEventListener('click', function() {
  closeHUD()
  const audio = new Audio("https://soundbible.com/mp3/Tiny%20Button%20Push-SoundBible.com-513260752.mp3");
  audio.play();
  });

let buttonContainer = document.createElement('div');
buttonContainer.style.position = 'absolute';
buttonContainer.style.top = '50%';
buttonContainer.style.left = '50%';
buttonContainer.style.transform = 'translate(-50%, -50%)';

function applyNeonStyle(element) {
  element.style.textShadow = '0 0 2px #FF4500, 0 0 5px #FF4500, 0 0 10px #FF4500, 0 0 15px #FF4500, 0 0 20px #FF4500, 0 0 25px #FF4500';
  element.style.color = 'white';
  element.style.backgroundColor = '#FF6';
  element.style.backgroundColor = 'transparent';
}

function applyButtonStyleWithSound(button, clickFunction) {
  applyNeonStyle(button);
  audiobotao(button);
  button.addEventListener('click', clickFunction);
  buttonContainer.appendChild(button);
}

let changeColorButton = createButton('Mudar Cor do Fundo', switchColorInput);
let changeBackgroundButton = createButton('Mudar Fundo', switchBackgroundInput);
let botaoMudarFundo = createButton('Mudar Fundo do Chat Global', handleClickMudarFundoChat);
let convertPlayerButton = createButton('Converter Player', transformPlayer);
let animeAleatorioButton = createButton('Anime Aleatorio', handleClickanimeAleatorio);
let siteleveButton = createButton('Site Leve', handleClicksiteleve);
let contaautomaticaButton = createButton('Registrar Conta Automática', handleClickcontaautomatica);
let comandosButton = createButton('Comandos', handleClickComandos);
let updatesButton = createButton('Ultimos Updates', handleClickUpdates);

applyButtonStyleWithSound(changeColorButton, switchColorInput);
applyButtonStyleWithSound(changeBackgroundButton, switchBackgroundInput);
applyButtonStyleWithSound(botaoMudarFundo, handleClickMudarFundoChat);
applyButtonStyleWithSound(convertPlayerButton, transformPlayer);
applyButtonStyleWithSound(animeAleatorioButton, handleClickanimeAleatorio);
applyButtonStyleWithSound(siteleveButton, handleClicksiteleve);
applyButtonStyleWithSound(comandosButton, handleClickComandos);
applyButtonStyleWithSound(updatesButton, handleClickUpdates);
applyButtonStyleWithSound(contaautomaticaButton, handleClickcontaautomatica);

document.body.appendChild(buttonContainer);

function audiobotao(button) {
  button.addEventListener('click', function() {
    const audio = new Audio("https://soundbible.com/mp3/Tiny%20Button%20Push-SoundBible.com-513260752.mp3");
    audio.play();
  });
}

      colorInput = document.createElement('input');
      colorInput.type = 'color';
      colorInput.style.display = 'none';
      buttonContainer.appendChild(colorInput);

      okButton = document.createElement('button');
      okButton.innerHTML = 'OK';
      okButton.style.display = 'none';
      okButton.style.width = '40px';
      okButton.style.height = '20px';
      okButton.addEventListener('click', applyColor);
      buttonContainer.appendChild(okButton);

      overlay.appendChild(buttonContainer);
      document.body.appendChild(overlay);
    } else {
      closeHUD();
    }
  }

  function createButton(text, onClick) {
    let button = document.createElement('button');
    button.innerHTML = text;
    button.style.display = 'block';
    button.style.width = '200px';
    button.style.height = '40px';
    button.style.marginBottom = '10px';
    button.addEventListener('click', onClick);
    return button;
  }

function handleClicksiteleve() {

const newHTML = `

<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Site Leve</title>
<style>
  .hidden {
    display: none;
  }
.chatContainer {
    padding: 10px;
    background-color: #f0f0f0;
    border-radius: 5px;
  }

  .chatMessage {
    display: flex;
    margin: 5px 0;
  }

  .avatar {
    margin-right: 10px;
  }

  .avatar img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
  }

  .message {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .username {
    font-weight: bold;
  }

  .text {
    margin-top: 5px;
  }
</style>
</head>
<body>
<button id="fetchButton">Últimos Animes</button>
<button id="chatButton">Chat</button>
<button id="closeAnimeListButton" class="hidden">Fechar Últimos Animes</button>
<div id="animeList"></div>

<div id="videoContainer"></div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const fetchButton = document.getElementById("fetchButton");
  const chatButton = document.getElementById("chatButton");
  const closeAnimeListButton = document.getElementById("closeAnimeListButton");
  const animeList = document.getElementById("animeList");
  const videoContainer = document.getElementById("videoContainer");

  fetchButton.addEventListener("click", async () => {
    try {
      const response = await fetch("https://animefire.vip/");
      const htmlContent = await response.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(htmlContent, "text/html");

      const animeContainers = doc.querySelectorAll(".divCardUltimosEpsHome");
      
      animeList.innerHTML = "";
      closeAnimeListButton.classList.remove("hidden");
      
      animeContainers.forEach(animeContainer => {
        const animeName = animeContainer.querySelector(".animeTitle").textContent;
        const animeLink = animeContainer.querySelector("a").getAttribute("href");

const animeElement = document.createElement("div");
animeElement.innerHTML = 
  '<h3>' + animeName + '</h3>' +
  '<p>Link: <a href="' + animeLink + '" target="_blank">' + animeLink + '</a></p>' +
  '<button class="watchButton" data-link="' + animeLink + '">Assistir</button>' +
  '<hr>';

        
        animeList.appendChild(animeElement);
      });

      const watchButtons = document.querySelectorAll(".watchButton");
      watchButtons.forEach(button => {
        button.addEventListener("click", async () => {
          const link = button.getAttribute("data-link");
          const watchResponse = await fetch(link);
          const watchHtmlContent = await watchResponse.text();

          const videoSrcMatch = watchHtmlContent.match(/data-video-src="([^"]+)"/);
          if (videoSrcMatch) {
            const videoSrc = videoSrcMatch[1];
            const videoResponse = await fetch(videoSrc);
            const videoDetails = await videoResponse.json();

            if (videoDetails.data && videoDetails.data.length > 0) {
              const lightspeedLink = videoDetails.data[0].src;
              
              const videoPlayer = document.createElement("video");
              videoPlayer.controls = true;
              videoPlayer.src = lightspeedLink;
              videoPlayer.setAttribute("playsinline", true);
              videoPlayer.style.width = "100%"; 
              videoPlayer.style.height = "auto";

              const closeButton = document.createElement("button");
              closeButton.textContent = "Fechar Vídeo";
              closeButton.addEventListener("click", () => {
                videoContainer.innerHTML = ""; 
                animeList.classList.remove("hidden"); 
                closeAnimeListButton.classList.remove("hidden"); 
              });

              videoContainer.innerHTML = ""; 
              videoContainer.appendChild(videoPlayer);
              videoContainer.appendChild(closeButton);

              animeList.classList.add("hidden");
              closeAnimeListButton.classList.add("hidden"); 
            } else {
              console.log("Lightspeed link not found.");
            }
          } else {
            console.log("Video source not found.");
          }
        });
      });

       closeAnimeListButton.addEventListener("click", () => {
        animeList.innerHTML = ""; 
        closeAnimeListButton.classList.add("hidden"); 
      });

    } catch (error) {
      console.error("Error fetching data:", error);
    }
  });

  chatButton.addEventListener("click", async () => {
    try {
      const data = {
        action: 'load',
        type: 'public'
      };

      const formData = new URLSearchParams();
      for (const key in data) {
        formData.append(key, data[key]);
      }

      const chatResponse = await fetch('https://animefire.vip/proc/chat', {
        method: 'POST',
        body: formData
      });

      if (chatResponse.ok) {
        const chatData = await chatResponse.json();

        animeList.innerHTML = ""; 
        
        const chatContainer = document.createElement("div");
        chatContainer.classList.add("chatContainer");

       chatData.forEach(message => {
  const chatContainer = document.createElement("div");
  chatContainer.classList.add("chatContainer");

  const chatMessage = document.createElement("div");
  chatMessage.classList.add("chatMessage");

  const [hour, minute] = message.data.split(":");

  const formattedTime = hour + ':' + minute;

chatMessage.innerHTML = 
    '<div class="message">' +
      '<div class="avatar"><img src="https://animefire.vip/' + message.avatar + '" alt="Avatar"></div>' +
      '<div class="username">' + message.username + '</div>' +
      '<div class="text">' + message.texto + '</div>' +
      '<div class="time">' + formattedTime + '</div>' +
    '</div>';

  chatContainer.appendChild(chatMessage);

  const line = document.createElement("hr");
  chatContainer.appendChild(line); 
  animeList.appendChild(chatContainer);
});
        animeList.appendChild(chatContainer);
      } else {

      }
    } catch (error) {

    }
  });
});
</script>
</body>
</html>

`;
document.open();
document.write(newHTML);
document.close();

}

function handleClickcontaautomatica() {

function obterEmailEsenha() {
  const emailAlt = prompt('Digite o e-mail de uma alt que vai usar para automações no site ou digite "ajuda" para mais informações');

  if (emailAlt === "ajuda") {
    alert("Você precisa de uma segunda conta para fazer certas coisas no site, tipo mandar uma mensagem para tirar o limite de mensagens que você têm quando tiver enviado 4 mensagens, etc...");
    return;
  }

  const senhaAlt = prompt('Digite a senha de uma alt que vai usar para automações no site ou digite "ajuda" para mais informações');

  if (senhaAlt === "ajuda") {
    alert("Você precisa de uma segunda conta para fazer certas coisas no site, tipo mandar uma mensagem para tirar o limite de mensagens que você têm quando tiver enviado 4 mensagens, etc...");
    return;
  }

  const contaAlt = { email: emailAlt, senha: senhaAlt };

  localStorage.setItem('contaalt', JSON.stringify(contaAlt));

  const emailOriginal = prompt('Agora digite o email da sua conta original');
  const senhaOriginal = prompt('Agora digite a senha da sua conta original');

  const contaOriginal = { email: emailOriginal, senha: senhaOriginal };

  localStorage.setItem('contaoriginal', JSON.stringify(contaOriginal));
}

obterEmailEsenha();

}

function handleClickMudarFundoChat() {
    const inputArquivo = document.createElement('input');
    inputArquivo.type = 'file';

    inputArquivo.addEventListener('change', function(event) {
        const div_msgs_pc = document.getElementById('mainDivMSGs');
        const arquivo = event.target.files[0];

        if (arquivo) {
            const leitor = new FileReader();
            leitor.onload = function(e) {
                div_msgs_pc.style.backgroundImage = `url('${e.target.result}')`;
                div_msgs_pc.style.backgroundSize = 'cover';

                localStorage.setItem("imagemchat", e.target.result);
            };
            leitor.readAsDataURL(arquivo);
        }
    });

    inputArquivo.click();
}

  function handleClicksiteAcesso() {
    window.open('https://mikill73.github.io/AnimeFireMod/', '_blank');

  }

  function handleClickanimeAleatorio() {
   fetch('https://raw.githubusercontent.com/Mikill73/AnimeFireMod/main/Mod/AnimeAleatorio.txt')
  .then(response => response.text())
  .then(data => {
    const links = data.trim().split(' ');
    const randomIndex = Math.floor(Math.random() * links.length);
    const randomLink = links[randomIndex];

    window.location.href = randomLink;
  })
  .catch(error => console.log(error));

}

  function closeHUD() {
    overlay.parentNode.removeChild(overlay);
    overlay = null;
  }
function transformPlayer() {
  let videoElements = document.querySelectorAll('video');

  if (videoElements.length > 0) {
    videoElements.forEach(videoElement => {
      let videoLink = videoElement.getAttribute('src');

      if (videoLink) {
        console.log('Player Link:', videoLink);
        window.open(videoLink, '_blank').focus();
      } else {
        console.log('Link de player não encontrado.');
      }
    });
  } else {
    console.log('Nenhum vídeo encontrado.');
  }
}

transformPlayer();


  function switchColorInput() {
    if (colorInput.style.display === 'none') {
      colorInput.style.display = 'block';
      okButton.style.display = 'block';
    } else {
      colorInput.style.display = 'none';
      okButton.style.display = 'none';
    }
  }

function switchBackgroundInput() {
  let input = document.createElement('input');
  input.type = 'file';
  input.accept = 'image/*';
  input.addEventListener('change', handleFileUpload);
  input.click();
}

function handleFileUpload(event) {
  const file = event.target.files[0];
  if (file) {
    const reader = new FileReader();

    reader.onload = function () {
      const imageUrl = reader.result;
      applyBackgroundImage(imageUrl);
      saveImageToLocalStorage(imageUrl);
    };

    reader.readAsDataURL(file);
  }
}

function applyBackgroundImage(imageUrl) {
  document.body.style.backgroundImage = `url('${imageUrl}')`;
  document.body.style.backgroundSize = 'cover';
}

function saveImageToLocalStorage(imageUrl) {
  localStorage.setItem('imagemfundosite', imageUrl);
}

  function applyColor() {
    let selectedColor = colorInput.value;
    document.body.style.backgroundColor = selectedColor;
    setCookie('background', selectedColor);
    colorInput.style.display = 'none';
    okButton.style.display = 'none';
  }
function handleClickUpdates() {

const overlay2 = document.createElement("div");
overlay2.className = "overlay";
overlay2.style.display = "none";

const overlay2Content = document.createElement("div");
overlay2Content.className = "overlay2-content";
overlay2.appendChild(overlay2Content);

overlay2.style.position = "fixed";
overlay2.style.top = "0";
overlay2.style.left = "0";
overlay2.style.width = "100%";
overlay2.style.height = "100%";
overlay2.style.backgroundColor = "rgba(0, 0, 0, 0.7)";
overlay2.style.display = "flex";
overlay2.style.justifyContent = "center";
overlay2.style.alignItems = "center";
overlay2.style.zIndex = "9999";

const closeButton = document.createElement("button");
      closeButton.innerHTML = 'X';
      closeButton.style.position = 'absolute';
      closeButton.style.top = '10px';
      closeButton.style.right = '10px';
      closeButton.style.width = '30px';
      closeButton.style.height = '30px';
      closeButton.style.fontSize = '16px';
      closeButton.style.fontWeight = 'bold';
      closeButton.style.color = 'white';
      closeButton.style.backgroundColor = 'red';
overlay2.appendChild(closeButton);

const textElement = document.createElement("h8");
textElement.innerHTML = `- Comandos agora executam localmente, com mais facilidade e velocidade <br> - Botão de ultimos updates para que os usuários não precisem ir ao discord para serem informados sobre os updates <br> - Adicionado comando de lanternaon e lanternaoff, só funciona no pc <br> - Agora se você manter seu dedo/mouse encima de um ep na lista de ultimos eps adicionados esse ep é carregado na imagem do episódio! <br> - Tudo que era de animefire.net no codigo alterado para animefire.vip <br> - Agora existem 20 cores neon para você usar, o sistema de cores mudou, agora é mais facil mudar e alterar, mais rapido e facil. <br> - Substituido o botão de yt por um botão de emoji, você pode sugerir novos emojis ou figurinhas em #sugestões no discord <br> - Bloqueador de perfis que bloqueia apenas imagens que ele posta, isso é util pra usuários que fazem macaquices com imagens mas não em mensagens <br> - O bloqueador de perfis agora mostra porque o usuário está na lista de bloqueados zombando dele <br> - Sistema de linxamento, se você encontrar um usuário bloqueado o codigo vai fazer você enviar um comentário zoando ele <br> - Se você encontrar um comentário de uma lista de usuários o codigo faz você enviar uma resposta para esse comentário, se for uma pessoa da lista que não esteja na lista de bloqueados é uma mensagem amigavel tipo eae oi, se for da lista de bloqueados é tipo "nojento" <br> - Se você passar seu dedo ou mouse encima de um poster de anime o codigo te fornece informações sobre o mesmo. <br> - Corrigido bug que carregava varias prévias no episódio. <br> - Adicionado botão de registrar conta automatica, usa se confiar, você vai precisar de duas contas, uma alt e uma original. O botão abre um input pedindo o email e senha da sua alt, depois o email e senha da sua original.
Vai ser usado para varios sistemas interessantes que usam contas, você vai ter seu própio bot para automatizar certas coisas. <br> - Primeira automação de conta : Tirar limites de mensagem automaticamente, o codigo loga na sua alt, envia uma mensagem no chat, loga na sua original e termina. Só funciona quando as ultimas 4 mensagens do chat forem enviadas pela mesma pessoa, assim tira o limite e a pessoa pode falar novamente. <br> `;
overlay2Content.appendChild(textElement);

overlay2Content.style.backgroundColor = "white";
overlay2Content.style.padding = "20px";
overlay2Content.style.textAlign = "center";
overlay2Content.style.borderRadius = "5px";
overlay2Content.style.position = "relative";

document.body.appendChild(overlay2);

closeButton.addEventListener("click", (event) => {
  event.stopPropagation();
  overlay2.style.display = "none";
});
}
  function resetBackground() {
    document.body.style.backgroundColor = '';
    removeCookie('background');
    localStorage.removeItem('imagemfundosite');
    location.reload();
  }

  function handleClickComandos() {
    const comandos = {
    "arcoiris": `var elementos=document.querySelectorAll("*");function alterarCores(){elementos.forEach((function(e){if("SCRIPT"!==e.nodeName&&"STYLE"!==e.nodeName){var r=obterCorAleatoria();e.style.color=r}}))}function obterCorAleatoria(){for(var e="#",r=0;r<6;r++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e}setInterval(alterarCores,1e3);`,

    "sorteio": `function realizarSorteio() {
    var quantidade = parseInt(prompt('Quer sortear quantos valores?'));

    if (isNaN(quantidade)) {
        alert('Têm que ser número');
        return;
    }

    var valores = [];

    for (var i = 0; i < quantidade; i++) {
        var nome = prompt('Digite o nome do valor ' + (i + 1));
        valores.push(nome);

    }

    var valorSorteado = Math.floor(Math.random() * valores.length);
    var nomeSorteado = valores[valorSorteado];

    alert('Valor ganhador : ' + nomeSorteado);
}

realizarSorteio();`,

    "fundooriginalsite": `localStorage.removeItem('imagemfundosite');
location.reload();`,

 "site": `window.open('https://mikill73.github.io/AnimeFireMod/', '_blank');`,

    "lanternaon": `localStorage.setItem('lanterna', 'on');
                                       location.reload();`,

      "limparchat": `var divMSGsList = document.querySelectorAll(".divMSGs");
if (divMSGsList.length > 0) {
    divMSGsList.forEach(function(element) {
        element.parentNode.removeChild(element);
    });
} else {
    console.log("Divs não encontradas.");
}`,

      "lanternaoff": `localStorage.setItem('lanterna', 'off');
                                        location.reload();`

  };

  function executeCommand(command) {
    if (comandos.hasOwnProperty(command)) {
      try {
        eval(comandos[command]);
      } catch (error) {
        alert(`Erro executando ${command}: ${error}`);
      }
    } else {
      alert(`Comando "${command}" não encontrado.`);
    }
  }

  setTimeout(() => {
    const userInput = prompt('Digite um comando ou digite "cmds" para ver todos os comandos');
    if (userInput) {
      if (userInput === "cmds") {
        const allCommands = Object.keys(comandos).join(", ");
        alert(`Comandos disponíveis: ${allCommands}`);
      } else {
        executeCommand(userInput);
      }
    }
  }, 1);
  }

  let menuButton = null;

  function loadBackgroundFromLocalStorage() {
    let backgroundImage = localStorage.getItem('backgroundImage');
    if (backgroundImage) {
      document.body.style.backgroundImage = 'url(' + backgroundImage + ')';
    }

if (!menuButton) {
  menuButton = document.createElement('button');
  menuButton.innerHTML = '[ MENU ]';
  menuButton.style.position = 'fixed';
  menuButton.style.top = '0px';
  menuButton.style.left = '2px';
  menuButton.style.zIndex = '9998';
  menuButton.style.padding = '10px 15px';
  menuButton.style.fontSize = '25px';
  menuButton.style.fontWeight = 'bold';
  menuButton.style.border = 'none';
  menuButton.style.display = 'block';
  menuButton.style.borderRadius = '20px';
  menuButton.style.color = 'white';
  menuButton.style.backgroundColor = '#FF6';
  menuButton.style.textShadow = '0 0 2px #FF4500, 0 0 5px #FF4500, 0 0 10px #FF4500, 0 0 15px #FF4500, 0 0 20px #FF4500, 0 0 25px #FF4500';
  menuButton.style.backgroundColor = 'transparent';

menuButton.addEventListener('click', function() {
  switchOverlay();
  const audio = new Audio("https://soundbible.com/mp3/Tiny%20Button%20Push-SoundBible.com-513260752.mp3");
  audio.play();
  });

  document.body.appendChild(menuButton);
      }

    }

setInterval(loadBackgroundFromLocalStorage, 2000);
})();


//botão pedido de amizade comentários
(function() {
  'use strict';

function aplicarBotaoSolicitacaoAmizade(elementoComentario, idUsuario) {
    const elementoLinkUsuario = elementoComentario.querySelector('.usr_name_cmt');

    if (elementoLinkUsuario) {
        const botaoSolicitarAmizade = document.createElement('button');
        botaoSolicitarAmizade.textContent = 'Enviar Pedido de Amizade';
        botaoSolicitarAmizade.style.background = 'transparent';
        botaoSolicitarAmizade.style.color = '#FF4500';
        botaoSolicitarAmizade.style.border = 'none';
        botaoSolicitarAmizade.style.outline = 'none';
        botaoSolicitarAmizade.style.cursor = 'pointer';
        botaoSolicitarAmizade.style.marginLeft = '5px';
        botaoSolicitarAmizade.style.textShadow = '0 0 2px #FF4500, 0 0 5px #FF4500';
        botaoSolicitarAmizade.addEventListener('click', () => {
            enviarSolicitacaoAmizade(idUsuario);
        });

        const botaoExistente = elementoComentario.querySelector('.botao-solicitar-amizade');
        if (!botaoExistente) {
            elementoLinkUsuario.parentNode.insertBefore(botaoSolicitarAmizade, elementoLinkUsuario.nextSibling);
            botaoSolicitarAmizade.classList.add('botao-solicitar-amizade');
        }
    }
}

function verificarNovosComentarios() {
    const elementosComentario = document.querySelectorAll('.cmt');
    elementosComentario.forEach(elementoComentario => {
        const elementoLinkUsuario = elementoComentario.querySelector('.usr_name_cmt');
        if (elementoLinkUsuario) {
            const urlUsuario = elementoLinkUsuario.href;
            const correspondenciaIdUsuario = urlUsuario.match(/\/users\/(\d+)/);

            if (correspondenciaIdUsuario && correspondenciaIdUsuario.length >= 2) {
                const idUsuario = correspondenciaIdUsuario[1];
                aplicarBotaoSolicitacaoAmizade(elementoComentario, idUsuario);
            }
        }
    });
}

verificarNovosComentarios();
setInterval(verificarNovosComentarios, 3000);

function enviarSolicitacaoAmizade(id) {
    $.ajax({
        url: site_url + "/edit/friend",
        type: "post",
        data: {
            action: "send_friend_request",
            id: id
        },
        success: function(response) {
            alert('Pedido de amizade enviado')
        },
        error: function() {
            alert('Falha')
        }
    });
}

})();

// bloqueador de perfis / comentários e reply de comentários
(function() {
    'use strict';

const perfisBloqueados = [
    {
        nomeAmudar: 'Esquisito',
        link: 'https://animefire.vip/users/330515792',
        textoAmudar: 'Postou pornografia infantil e gore no site, agora fica que nem um esquisito falando que vai estuprar alguêm, nojento'
    },
    {
        nomeAmudar: 'Esquisitoide 2',
        link: 'https://animefire.vip/users/202121640',
        textoAmudar: 'Outra alt do cara que posta pornografia infantil e gore no site, fala que vai estuprar alguêm bla bla bla morra'
    },
    {
        nomeAmudar: 'SOCORRO OLHA ESSE PERVERTIDO',
        link: 'https://animefire.vip/users/17453763',
        textoAmudar: 'Esse doente postou 500 fotos........ 500 FOTOS DE PORNOGRAFIA KKKKKKKKKKKKKKKKKKKKK, ELE FICOU DE 12AM ATÉ 4PM POSTANDO FOTO DE PORNO EM COMENTÁRIO KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK'
    },
    {
        nomeAmudar: 'Esquisito Original',
        link: 'https://animefire.vip/users/141612483',
        textoAmudar: 'Mesma pessoa que posta pornografia infantil, mas essa foi a primeira conta que ele começou KKKK'
    },
    {
        nomeAmudar: 'Esquisito? O inimigo agora é outro',
        link: 'https://animefire.vip/users/816651674',
        textoAmudar: 'Mesma pessoa que posta pornografia infantil e gore, começou a postar gore nessa aqui'
    },
    {
        nomeAmudar: 'Olha esse merda kkkkkkkkkkkkk',
        link: 'https://animefire.vip/users/586396554',
        textoAmudar: 'Imagens de estupro hentai'
    },
    {
        nomeAmudar: 'Só encostou na mãe esse aqui',
        link: 'https://animefire.vip/users/399700421',
        textoAmudar: 'Foto de perfil de hentai, banner de hentai, comentário de hentai, nunca encostou em nenhuma mulher, aposto que nem na propia mãe, mas vou dar a chance e dizer que encostou na mãe pelomenos'
    },
    {
        nomeAmudar: 'Estuprado',
        link: 'https://animefire.vip/users/570421656',
        textoAmudar: 'Foto de perfil de hentai banner de hentai, pra piorar a foto é um gif de uma criancinha sendo comida, plmns é hentai e não real.....'
    },
    {
        nomeAmudar: 'Mais um que usa essa porra',
        link: 'https://animefire.vip/users/601178026',
        textoAmudar: 'Esse usa foto de perfil e banner hentai, só faz merda msm viu'
    },
    {
        nomeAmudar: 'Blablabla foto de perfil de retardado macaco',
        link: 'https://animefire.vip/users/88927552',
        textoAmudar: 'Esse usa foto de perfil e banner hentai, só faz merda msm viu'
    },
    {
        nomeAmudar: 'Blablabla foto de perfil de retardado macaco',
        link: 'https://animefire.vip/users/360939010',
        textoAmudar: 'Esse usa foto de perfil e banner hentai, só faz merda msm viu'
    },
    {
        nomeAmudar: 'Nordestino',
        link: 'https://animefire.vip/users/333769650',
        textoAmudar: 'Foto nazista, banner nazista, postagens nazistas, replys nazistas, conversas nazistas, corpo nazista, voz nazista e diz ser descendente de alemão KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK........................'
    },
    {
        nomeAmudar: 'alt do mlk que posta pornografia infantil',
        link: 'https://animefire.vip/users/403236720',
        textoAmudar: 'louco? Eu já fui louco uma vez, me trancaram em um quarto, um quarto cheio de ratos, lá estava um rato doente que via pornografia infantil'
    },

];

function checkCommentsAndRepliesForBlockedUsers() {
    const elementsToCheck = document.querySelectorAll('.cmt, .cmt_reply_div');

    elementsToCheck.forEach(element => {
        const userLink = element.querySelector('.us_reply, .usr_name_cmt').getAttribute('href');

        const blockedProfile = perfisBloqueados.find(profile => profile.link === userLink);

        if (blockedProfile) {
            const userImage = element.querySelector('.avatar_reply, .pic_cmt');
            const userName = element.querySelector('.us_reply, .usr_name_cmt');
            const commentTextElement = element.querySelector('.p_reply, .p_tag_cmt');

            if (userImage) {
                userImage.parentNode.removeChild(userImage);
            }

            userName.textContent = blockedProfile.nomeAmudar;
            userName.style.color = 'red';

            const commentText = commentTextElement.textContent;
            commentTextElement.textContent = blockedProfile.textoAmudar;
            commentTextElement.style.color = 'red';
        }
    });
}

checkCommentsAndRepliesForBlockedUsers();

setInterval(checkCommentsAndRepliesForBlockedUsers, 250);

})();

//bloqueador de perfis chat

(function() {
    'use strict';

let verificarchat = document.query
    function getBlockedLinksFromCookie() {
        const cookieValue = document.cookie
            .split('; ')
            .find(row => row.startsWith('block='))
            .split('=')[1];

        if (cookieValue) {
            return cookieValue.split(' ');
        } else {
            return [];
        }
    }

    function blockMessages() {
        const prmtCookie = document.cookie
            .split('; ')
            .find(row => row.startsWith('prmt='));

        if (!prmtCookie) {
            return;
        }

        const blockedLinks = getBlockedLinksFromCookie();

        const chatMessages = document.querySelectorAll('.divMSGs');

        chatMessages.forEach(message => {
            const profileUrlInput = message.querySelector('input[name="profile_url"]');
            const userLink = profileUrlInput.value;
            const userName = message.querySelector('.linkPerfilPC');
            const userImage = message.querySelector('.imgChat');
            const messageText = message.querySelector('.h6Msg');

            if (blockedLinks.includes(userLink)) {
                if (userImage) {
                    userImage.parentNode.removeChild(userImage);
                }

                userName.textContent = 'Perfil Bloqueado';
                userName.style.color = 'red';

                messageText.innerHTML = '<span class="spanPChatH ml-2" style="color: red;">Mensagem Bloqueada, esse perfil está bloqueado no fire deluxe por ter feito algo errado no site!</span>';
            }
        });
    }

    blockMessages();

    setInterval(blockMessages, 500); // 500 milisegundos, melhor não diminuir o tempo para não lagar

})();

//cookie de perfis bloqueados

(function() {
    'use strict';
fetch('https://raw.githubusercontent.com/Mikill73/AnimeFireMod/main/Mod/Lista%20Bloqueados.txt')
  .then(response => response.text())
  .then(data => {
    document.cookie = 'block=' + data;
  });
})();

// Hud firedeuxe

(function() {
  'use strict';

document.querySelector('link[rel="shortcut icon"]').href = "https://animefire.vip/uploads/cmt/7727335_1691415585.webp";
document.querySelector('link[rel="apple-touch-icon"]').href = "https://animefire.vip/uploads/cmt/7727335_1691415585.webp";

document.title = "FireDeluxe";

})();

//cores nome
(function() {
  'use strict';

const nomesCores = {
  "Mikill": "dourado",
  "Ayumi": "vermelho"
};

const coresRGB = {
  "vermelho": "rgb(255, 0, 0)",
  "verde": "rgb(0, 255, 0)",
  "azul": "rgb(0, 0, 255)",
  "amarelo": "rgb(255, 255, 0)",
  "laranja": "rgb(255, 165, 0)",
  "rosa": "rgb(255, 105, 180)",
  "roxo": "rgb(128, 0, 128)",
  "ciano": "rgb(0, 255, 255)",
  "magenta": "rgb(255, 0, 255)",
  "dourado": "rgb(255, 215, 0)",
  "prata": "rgb(192, 192, 192)",
  "preto": "rgb(0, 0, 0)",
  "branco": "rgb(255, 255, 255)",
  "marrom": "rgb(139, 69, 19)",
  "cinza": "rgb(128, 128, 128)",
  "verde-oliva": "rgb(85, 107, 47)",
  "turquesa": "rgb(64, 224, 208)",
  "azul-marinho": "rgb(0, 0, 128)",
  "vermelho-escuro": "rgb(139, 0, 0)",
  "azul-escuro": "rgb(0, 0, 139)"
};

const nomes = Object.keys(nomesCores);
let currentIndex = 0;

function aplicarEfeitoNeon(elemento, cor) {
  elemento.style.color = cor;
  elemento.style.fontWeight = "bold";
  elemento.style.textShadow = `0 0 10px ${cor}, 0 0 20px ${cor}, 0 0 30px ${cor}`;
}

function aplicarEfeitoNeonEmNomes() {
  const elementosLinks = document.querySelectorAll(".usr_name_cmt, .us_reply, .usernameIMG, .linkPerfilPC");

  elementosLinks.forEach(link => {
    const texto = link.textContent.trim();
    for (const nome in nomesCores) {
      if (texto.includes(nome)) {
        const corNome = nomesCores[nome];
        const corRGB = coresRGB[corNome];
        aplicarEfeitoNeon(link, corRGB);
        break;
      }
    }
  });
}

function changeNameColor() {
  const currentNome = nomes[currentIndex];
  const corNome = nomesCores[currentNome];
  const corRGB = coresRGB[corNome];

  aplicarEfeitoNeonEmNomes();

  currentIndex = (currentIndex + 1) % nomes.length;
}

setInterval(changeNameColor, 200);
})();

(function() {
  'use strict';

  const divElement = document.querySelectorAll('.div_send_cmt');
  const paragraphElement = document.createElement('p');

  fetch('https://raw.githubusercontent.com/Mikill73/AnimeFireMod/main/Mod/Imagemcomentario.txt')
    .then(response => response.text())
    .then(data => {
      const mensagem = data.trim();
      paragraphElement.textContent = `Ajude a divulgar o mod compartilhando essa imagem: ${mensagem}`;
      paragraphElement.style.fontFamily = 'Arial, sans-serif';
      paragraphElement.style.fontSize = '16px';
      paragraphElement.style.color = '#1A1A1A';
      divElement.appendChild(paragraphElement);
    });

  var imagem = document.querySelector('img[src="https://animefire.vip/img/lt/logo.webp"]');
  if (imagem) {
    imagem.src = "https://animefire.vip/uploads/cmt/2315941_1688854447.webp";
  }

  var botaoReportar = document.createElement('button');
  botaoReportar.textContent = 'Reportar usuários no site';
  botaoReportar.style.marginBottom = '10px';
  botaoReportar.style.padding = '5px 10px';
  botaoReportar.style.color = 'red';
  botaoReportar.style.border = 'none';
  botaoReportar.style.cursor = 'pointer';
  botaoReportar.style.backgroundColor = '#FF6';
  botaoReportar.style.backgroundColor = 'transparent';

  botaoReportar.setAttribute('target', '_blank');
  botaoReportar.setAttribute('onclick', 'window.open("https://mikill73.github.io/AnimeFireMod/")');

  var elementoPai = document.querySelector('.mainDivComents').parentNode;

  elementoPai.insertBefore(botaoReportar, document.querySelector('.mainDivComents'));

})();

//botões de anterior e proximo ep

(function() {
  'use strict';

var buttonContainer = document.querySelector('.page-item');

function loadEpisode(offset) {
    var videoElement = document.getElementById('my-video_html5_api');
    var titleElement = document.querySelector('.sectionVideoEpTitle');
    if (videoElement && titleElement) {
        var videoSrc = videoElement.getAttribute('src');
        var match = videoSrc.match(/\/(\d+)\.mp4$/);
        if (match) {
            var currentEpisode = parseInt(match[1]);
            var newEpisode = currentEpisode + offset;
            var newVideoSrc = videoSrc.replace('/' + currentEpisode + '.mp4', '/' + newEpisode + '.mp4');
            videoElement.setAttribute('src', newVideoSrc);
            videoElement.load();
            var titleText = titleElement.textContent;
            var newTitleText = titleText.replace(/Episódio \d+/, 'Episódio ' + newEpisode);
            titleElement.textContent = newTitleText;
        }
    }
}

function createButtonWithArrowBefore(text, imgSrc, clickHandler) {
    var button = document.createElement('button');
    button.className = 'btnSub';
    button.type = 'button';
    button.name = 'carregar_episodio';
    var span = document.createElement('span');
    span.innerHTML = '<img alt="" src="' + imgSrc + '" style="width: 15px; height: 15px;"> ' + text;
    button.appendChild(span);
    var buttonDiv = document.createElement('div');
    buttonDiv.className = 'animeInfo mx-1 mb-2 divBtnFormEp';
    buttonDiv.appendChild(button);
    buttonContainer.appendChild(buttonDiv);
    button.addEventListener('click', clickHandler);
}

function createButtonWithArrowAfter(text, imgSrc, clickHandler) {
    var button = document.createElement('button');
    button.className = 'btnSub';
    button.type = 'button';
    button.name = 'carregar_episodio';
    var span = document.createElement('span');
    span.innerHTML = text + ' <img alt="" src="' + imgSrc + '" style="width: 15px; height: 15px;">';
    button.appendChild(span);
    var buttonDiv = document.createElement('div');
    buttonDiv.className = 'animeInfo mx-1 mb-2 divBtnFormEp';
    buttonDiv.appendChild(button);
    buttonContainer.appendChild(buttonDiv);
    button.addEventListener('click', clickHandler);
}

createButtonWithArrowBefore('Carregar episódio anterior no player', 'https://animefire.vip/img/icons/angle-left.png', function() {
    loadEpisode(-1);
});

createButtonWithArrowAfter('Carregar próximo episódio no player', 'https://animefire.vip/img/icons/angle-right.png', function() {
    loadEpisode(1);
});
})();
