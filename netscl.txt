//colocar as respostas nas questÃµes
(function() {
    'use strict';

function createAnswerTextarea() {

const answerTextarea = document.createElement('textarea');
answerTextarea.classList.add('custom-answer-textarea');
answerTextarea.setAttribute('readonly', 'true');
answerTextarea.style.position = 'absolute';
answerTextarea.style.top = '50px';
answerTextarea.style.left = '50px';
answerTextarea.style.zIndex = '9999';
answerTextarea.style.width = '300px';
answerTextarea.style.height = '200px';

answerTextarea.style.boxShadow = '0 0 10px rgba(255, 69, 0, 0.8)';
answerTextarea.style.backgroundColor = 'transparent';
answerTextarea.style.border = 'none';

  let isDragging = false;
  let offsetX, offsetY;

  answerTextarea.addEventListener('mousedown', (e) => {
    isDragging = true;
    offsetX = e.clientX - answerTextarea.getBoundingClientRect().left;
    offsetY = e.clientY - answerTextarea.getBoundingClientRect().top;
  });

  document.addEventListener('mousemove', (e) => {
    if (isDragging) {
      const newX = e.clientX - offsetX;
      const newY = e.clientY - offsetY;

      answerTextarea.style.left = newX + 'px';
      answerTextarea.style.top = newY + 'px';
    }
  });

  document.addEventListener('mouseup', () => {
    isDragging = false;
  });

  document.body.appendChild(answerTextarea);

  return answerTextarea;
}

function updateAnswerTextarea(answerTextarea, answers) {
  answerTextarea.value = answers.join('\n');
}

function checkLocalStorage() {
  const currentPageURL = window.location.href;
  const dadosLinks = JSON.parse(localStorage.getItem('dadosLinks'));

  if (dadosLinks && currentPageURL in dadosLinks) {
    const currentPageData = dadosLinks[currentPageURL];
    let answerTextarea = document.querySelector('.custom-answer-textarea');

    if (!answerTextarea) {
      answerTextarea = createAnswerTextarea();
    }

    const answers = [];

    for (const questionNumber in currentPageData) {
      const questionData = currentPageData[questionNumber];
      const answer = `${questionNumber} - ${questionData.resposta}`;
      answers.push(answer);
    }
    updateAnswerTextarea(answerTextarea, answers);
  }
}
setInterval(checkLocalStorage, 1000);

checkLocalStorage();
})();

//atualizar respostas
(function() {
    'use strict';

fetch('https://raw.githubusercontent.com/Mikill73/miniature-umbrell/main/respostasntscl.txt')
  .then(response => response.text())
  .then(data => {
    const cleanedData = data.replace(/(\r\n|\n|\r)/gm, "");
    const startIndex = cleanedData.indexOf('{');
    const endIndex = cleanedData.lastIndexOf('}') + 1;
    const jsonData = cleanedData.substring(startIndex, endIndex);
    
    try {
      const parsedData = JSON.parse(jsonData);

      localStorage.setItem('dadosLinks', JSON.stringify(parsedData));
    } catch (error) {
    }
  })
  .catch(error => {
  });

})();
